#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef OPTIMOVESDK_SWIFT_H
#define OPTIMOVESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OptimoveSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDebug = 0,
  LogLevelInfo = 1,
  LogLevelWarn = 2,
  LogLevelError = 3,
  LogLevelFatal = 4,
};



@class NSNumber;
@class NSString;

/// Receiver of logs of OptimoveSDK.
SWIFT_PROTOCOL("_TtP11OptimoveSDK22OptiLoggerOutputStream_")
@protocol OptiLoggerOutputStream
/// Describe if the stream could receive logs independently from project settings.
/// If <code>true</code> all logs will be received, despite on a project settings.
@property (nonatomic, readonly) BOOL isVisibleToClient;
/// The method receive a log for the  Optimove SDK.
/// \param level The log level
///
/// \param fileName The file name of the invoked log
///
/// \param methodName The method name of the invoked log
///
/// \param logModule The module name of the invoked log
///
/// \param message The message passed with the log
///
- (void)logWithLevel:(enum LogLevel)level fileName:(NSString * _Nonnull)fileName methodName:(NSString * _Nonnull)methodName logModule:(NSString * _Nullable)logModule message:(NSString * _Nonnull)message;
@end


/// Contains an array of a log receivers.
SWIFT_CLASS("_TtC11OptimoveSDK26OptiLoggerStreamsContainer")
@interface OptiLoggerStreamsContainer : NSObject
/// The method transmit a log event to a set of receivers.
/// \param level The log level
///
/// \param fileName The file name of invoked log
///
/// \param methodName The method name of invoked log
///
/// \param logModule The module name of invoked log
///
/// \param message The message passed with log
///
+ (void)logWithLevel:(enum LogLevel)level fileName:(NSString * _Nullable)fileName methodName:(NSString * _Nullable)methodName logModule:(NSString * _Nullable)logModule message:(NSString * _Nonnull)message;
/// Add a stream to a log receivers.
/// \param stream The stream for addition.
///
+ (void)addWithStream:(id <OptiLoggerOutputStream> _Nonnull)stream;
/// Remove a stream from a log receivers.
/// warning:
/// Current version does not maintains deletion from receivers.
/// \param stream The stream for deletion.
///
+ (void)removeWithStream:(id <OptiLoggerOutputStream> _Nonnull)stream;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The Optimove SDK for iOS - a realtime customer data platform.
/// The integration guide: https://github.com/optimove-tech/Optimove-SDK-iOS/wiki
/// warning:
///
/// To initialize and configure SDK using <code>Optimove.configure(for:)</code> first.
SWIFT_CLASS("_TtC11OptimoveSDK8Optimove")
@interface Optimove : NSObject
/// The shared instance of Optimove SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Optimove * _Nonnull shared;)
+ (Optimove * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Report the screen visit event.
/// \param screenTitle The screen title.
///
/// \param screenCategory The screen category.
///
- (void)reportScreenVisitWithScreenTitle:(NSString * _Nonnull)title screenCategory:(NSString * _Nullable)category;
/// Report the screen visit event.
/// \param screenTitle The screen title.
///
/// \param screenCategory The screen category.
///
+ (void)reportScreenVisitWithScreenTitle:(NSString * _Nonnull)title screenCategory:(NSString * _Nullable)category;
@end

@protocol OptimoveEvent;

@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Report the event to Optimove SDK.
/// \param name Name of the event.
///
/// \param parameters The dictionary of attributes.
///
- (void)reportEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/// Report the event to Optimove SDK.
/// \param name Name of the event.
///
/// \param parameters The dictionary of attributes.
///
+ (void)reportEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/// Report the event to Optimove SDK.
/// \param event Instance of OptimoveEvent type.
///
- (void)reportEvent:(id <OptimoveEvent> _Nonnull)event;
/// Report the event to Optimove SDK.
/// \param event Instance of OptimoveEvent type.
///
+ (void)reportEvent:(id <OptimoveEvent> _Nonnull)event;
@end

@class NSData;
@class UIApplication;
@class NSUserActivity;
@protocol UIUserActivityRestoring;
@class UIScene;

@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Helper method for requesting the device token with alert, badge and sound permissions.
/// On success will raise the didRegisterForRemoteNotificationsWithDeviceToken UIApplication event
- (void)pushRequestDeviceToken;
/// Helper method for requesting the device token with alert, badge and sound permissions.
/// On success will raise the didRegisterForRemoteNotificationsWithDeviceToken UIApplication event
- (void)pushRequestDeviceToken:(void (^ _Nullable)(UNAuthorizationStatus, NSError * _Nullable))onAuthorizationStatus SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Register a device token with the Optimove Push service.
/// Note you shouldn’t normally need to call this method, registration is handled by the SDK.
/// Parameters:
/// - deviceToken: The push token returned by the device
- (void)pushRegister:(NSData * _Nonnull)deviceToken;
/// Unregister the device token with the Optimove Push service.
/// Notifications will no longer be received until pushRequestDeviceToken is called again
- (void)pushUnregister;
/// Used for Deferred Deep Linking to pass the continuation to the Optimove SDK to be processed.
- (BOOL)application:(UIApplication * _Nonnull)application continue:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nonnull)(NSArray<id <UIUserActivityRestoring>> * _Nullable))restorationHandler SWIFT_WARN_UNUSED_RESULT;
/// Used for Deferred Deep Linking to pass the continuation to the Optimove SDK to be processed in scene-based apps.
- (void)scene:(UIScene * _Nonnull)scene continue:(NSUserActivity * _Nonnull)userActivity SWIFT_AVAILABILITY(ios,introduced=13.0);
@end


@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Set a user ID and a user email.
/// \param sdkId The user unique identifier.
///
/// \param email The user email.
///
- (void)registerUserWithSdkId:(NSString * _Nonnull)userID email:(NSString * _Nonnull)email;
/// Set a user ID and a user email.
/// \param sdkId The user unique identifier.
///
/// \param email The user email.
///
+ (void)registerUserWithSdkId:(NSString * _Nonnull)userID email:(NSString * _Nonnull)email;
/// Set a user ID to the Optimove SDK.
/// \param userID The user unique identifier.
///
- (void)setUserId:(NSString * _Nonnull)userID;
/// get visitor id of optimove SDK.
/// call this function if you need the internal visitor Id of Optimove
+ (NSString * _Nullable)getVisitorID SWIFT_WARN_UNUSED_RESULT;
/// Set a user ID to the Optimove SDK.
/// \param userID The user unique identifier.
///
+ (void)setUserId:(NSString * _Nonnull)userID;
/// Set a user email to the Optimove SDK.
/// \param email The user email.
///
- (void)setUserEmailWithEmail:(NSString * _Nonnull)email;
/// Set a user email to the Optimove SDK.
/// \param email The user email.
///
+ (void)setUserEmailWithEmail:(NSString * _Nonnull)email;
/// Signout the user from the app
/// Call this function to unset the customerID and revert to an anonymous visitor
+ (void)signOutUser;
@end


SWIFT_CLASS("_TtC11OptimoveSDK21OptimoveConfigBuilder")
@interface OptimoveConfigBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11OptimoveSDK13OptimoveEvent_")
@protocol OptimoveEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Valid a parameter values are <code>String</code>, <code>Int</code>, <code>Float</code>, <code>Double</code> or <code>Boolean</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
@end


SWIFT_CLASS("_TtC11OptimoveSDK18OptimoveTenantInfo")
@interface OptimoveTenantInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull tenantToken;
@property (nonatomic, copy) NSString * _Nonnull configName;
- (nonnull instancetype)initWithTenantToken:(NSString * _Nonnull)tenantToken configName:(NSString * _Nonnull)configName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11OptimoveSDK16PushNotification")
@interface PushNotification : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef OPTIMOVESDK_SWIFT_H
#define OPTIMOVESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OptimoveSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDebug = 0,
  LogLevelInfo = 1,
  LogLevelWarn = 2,
  LogLevelError = 3,
  LogLevelFatal = 4,
};



@class NSNumber;
@class NSString;

/// Receiver of logs of OptimoveSDK.
SWIFT_PROTOCOL("_TtP11OptimoveSDK22OptiLoggerOutputStream_")
@protocol OptiLoggerOutputStream
/// Describe if the stream could receive logs independently from project settings.
/// If <code>true</code> all logs will be received, despite on a project settings.
@property (nonatomic, readonly) BOOL isVisibleToClient;
/// The method receive a log for the  Optimove SDK.
/// \param level The log level
///
/// \param fileName The file name of the invoked log
///
/// \param methodName The method name of the invoked log
///
/// \param logModule The module name of the invoked log
///
/// \param message The message passed with the log
///
- (void)logWithLevel:(enum LogLevel)level fileName:(NSString * _Nonnull)fileName methodName:(NSString * _Nonnull)methodName logModule:(NSString * _Nullable)logModule message:(NSString * _Nonnull)message;
@end


/// Contains an array of a log receivers.
SWIFT_CLASS("_TtC11OptimoveSDK26OptiLoggerStreamsContainer")
@interface OptiLoggerStreamsContainer : NSObject
/// The method transmit a log event to a set of receivers.
/// \param level The log level
///
/// \param fileName The file name of invoked log
///
/// \param methodName The method name of invoked log
///
/// \param logModule The module name of invoked log
///
/// \param message The message passed with log
///
+ (void)logWithLevel:(enum LogLevel)level fileName:(NSString * _Nullable)fileName methodName:(NSString * _Nullable)methodName logModule:(NSString * _Nullable)logModule message:(NSString * _Nonnull)message;
/// Add a stream to a log receivers.
/// \param stream The stream for addition.
///
+ (void)addWithStream:(id <OptiLoggerOutputStream> _Nonnull)stream;
/// Remove a stream from a log receivers.
/// warning:
/// Current version does not maintains deletion from receivers.
/// \param stream The stream for deletion.
///
+ (void)removeWithStream:(id <OptiLoggerOutputStream> _Nonnull)stream;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The Optimove SDK for iOS - a realtime customer data platform.
/// The integration guide: https://github.com/optimove-tech/Optimove-SDK-iOS/wiki
/// warning:
///
/// To initialize and configure SDK using <code>Optimove.configure(for:)</code> first.
SWIFT_CLASS("_TtC11OptimoveSDK8Optimove")
@interface Optimove : NSObject
/// The shared instance of Optimove SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Optimove * _Nonnull shared;)
+ (Optimove * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Report the screen visit event.
/// \param screenTitle The screen title.
///
/// \param screenCategory The screen category.
///
- (void)reportScreenVisitWithScreenTitle:(NSString * _Nonnull)title screenCategory:(NSString * _Nullable)category;
/// Report the screen visit event.
/// \param screenTitle The screen title.
///
/// \param screenCategory The screen category.
///
+ (void)reportScreenVisitWithScreenTitle:(NSString * _Nonnull)title screenCategory:(NSString * _Nullable)category;
@end

@protocol OptimoveEvent;

@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Report the event to Optimove SDK.
/// \param name Name of the event.
///
/// \param parameters The dictionary of attributes.
///
- (void)reportEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/// Report the event to Optimove SDK.
/// \param name Name of the event.
///
/// \param parameters The dictionary of attributes.
///
+ (void)reportEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/// Report the event to Optimove SDK.
/// \param event Instance of OptimoveEvent type.
///
- (void)reportEvent:(id <OptimoveEvent> _Nonnull)event;
/// Report the event to Optimove SDK.
/// \param event Instance of OptimoveEvent type.
///
+ (void)reportEvent:(id <OptimoveEvent> _Nonnull)event;
@end

@class NSData;
@class UIApplication;
@class NSUserActivity;
@protocol UIUserActivityRestoring;
@class UIScene;

@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Helper method for requesting the device token with alert, badge and sound permissions.
/// On success will raise the didRegisterForRemoteNotificationsWithDeviceToken UIApplication event
- (void)pushRequestDeviceToken;
/// Helper method for requesting the device token with alert, badge and sound permissions.
/// On success will raise the didRegisterForRemoteNotificationsWithDeviceToken UIApplication event
- (void)pushRequestDeviceToken:(void (^ _Nullable)(UNAuthorizationStatus, NSError * _Nullable))onAuthorizationStatus SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Register a device token with the Optimove Push service.
/// Note you shouldn’t normally need to call this method, registration is handled by the SDK.
/// Parameters:
/// - deviceToken: The push token returned by the device
- (void)pushRegister:(NSData * _Nonnull)deviceToken;
/// Unregister the device token with the Optimove Push service.
/// Notifications will no longer be received until pushRequestDeviceToken is called again
- (void)pushUnregister;
/// Used for Deferred Deep Linking to pass the continuation to the Optimove SDK to be processed.
- (BOOL)application:(UIApplication * _Nonnull)application continue:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nonnull)(NSArray<id <UIUserActivityRestoring>> * _Nullable))restorationHandler SWIFT_WARN_UNUSED_RESULT;
/// Used for Deferred Deep Linking to pass the continuation to the Optimove SDK to be processed in scene-based apps.
- (void)scene:(UIScene * _Nonnull)scene continue:(NSUserActivity * _Nonnull)userActivity SWIFT_AVAILABILITY(ios,introduced=13.0);
@end


@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Set a user ID and a user email.
/// \param sdkId The user unique identifier.
///
/// \param email The user email.
///
- (void)registerUserWithSdkId:(NSString * _Nonnull)userID email:(NSString * _Nonnull)email;
/// Set a user ID and a user email.
/// \param sdkId The user unique identifier.
///
/// \param email The user email.
///
+ (void)registerUserWithSdkId:(NSString * _Nonnull)userID email:(NSString * _Nonnull)email;
/// Set a user ID to the Optimove SDK.
/// \param userID The user unique identifier.
///
- (void)setUserId:(NSString * _Nonnull)userID;
/// get visitor id of optimove SDK.
/// call this function if you need the internal visitor Id of Optimove
+ (NSString * _Nullable)getVisitorID SWIFT_WARN_UNUSED_RESULT;
/// Set a user ID to the Optimove SDK.
/// \param userID The user unique identifier.
///
+ (void)setUserId:(NSString * _Nonnull)userID;
/// Set a user email to the Optimove SDK.
/// \param email The user email.
///
- (void)setUserEmailWithEmail:(NSString * _Nonnull)email;
/// Set a user email to the Optimove SDK.
/// \param email The user email.
///
+ (void)setUserEmailWithEmail:(NSString * _Nonnull)email;
/// Signout the user from the app
/// Call this function to unset the customerID and revert to an anonymous visitor
+ (void)signOutUser;
@end


SWIFT_CLASS("_TtC11OptimoveSDK21OptimoveConfigBuilder")
@interface OptimoveConfigBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11OptimoveSDK13OptimoveEvent_")
@protocol OptimoveEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Valid a parameter values are <code>String</code>, <code>Int</code>, <code>Float</code>, <code>Double</code> or <code>Boolean</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
@end


SWIFT_CLASS("_TtC11OptimoveSDK18OptimoveTenantInfo")
@interface OptimoveTenantInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull tenantToken;
@property (nonatomic, copy) NSString * _Nonnull configName;
- (nonnull instancetype)initWithTenantToken:(NSString * _Nonnull)tenantToken configName:(NSString * _Nonnull)configName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11OptimoveSDK16PushNotification")
@interface PushNotification : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef OPTIMOVESDK_SWIFT_H
#define OPTIMOVESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OptimoveSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDebug = 0,
  LogLevelInfo = 1,
  LogLevelWarn = 2,
  LogLevelError = 3,
  LogLevelFatal = 4,
};



@class NSNumber;
@class NSString;

/// Receiver of logs of OptimoveSDK.
SWIFT_PROTOCOL("_TtP11OptimoveSDK22OptiLoggerOutputStream_")
@protocol OptiLoggerOutputStream
/// Describe if the stream could receive logs independently from project settings.
/// If <code>true</code> all logs will be received, despite on a project settings.
@property (nonatomic, readonly) BOOL isVisibleToClient;
/// The method receive a log for the  Optimove SDK.
/// \param level The log level
///
/// \param fileName The file name of the invoked log
///
/// \param methodName The method name of the invoked log
///
/// \param logModule The module name of the invoked log
///
/// \param message The message passed with the log
///
- (void)logWithLevel:(enum LogLevel)level fileName:(NSString * _Nonnull)fileName methodName:(NSString * _Nonnull)methodName logModule:(NSString * _Nullable)logModule message:(NSString * _Nonnull)message;
@end


/// Contains an array of a log receivers.
SWIFT_CLASS("_TtC11OptimoveSDK26OptiLoggerStreamsContainer")
@interface OptiLoggerStreamsContainer : NSObject
/// The method transmit a log event to a set of receivers.
/// \param level The log level
///
/// \param fileName The file name of invoked log
///
/// \param methodName The method name of invoked log
///
/// \param logModule The module name of invoked log
///
/// \param message The message passed with log
///
+ (void)logWithLevel:(enum LogLevel)level fileName:(NSString * _Nullable)fileName methodName:(NSString * _Nullable)methodName logModule:(NSString * _Nullable)logModule message:(NSString * _Nonnull)message;
/// Add a stream to a log receivers.
/// \param stream The stream for addition.
///
+ (void)addWithStream:(id <OptiLoggerOutputStream> _Nonnull)stream;
/// Remove a stream from a log receivers.
/// warning:
/// Current version does not maintains deletion from receivers.
/// \param stream The stream for deletion.
///
+ (void)removeWithStream:(id <OptiLoggerOutputStream> _Nonnull)stream;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The Optimove SDK for iOS - a realtime customer data platform.
/// The integration guide: https://github.com/optimove-tech/Optimove-SDK-iOS/wiki
/// warning:
///
/// To initialize and configure SDK using <code>Optimove.configure(for:)</code> first.
SWIFT_CLASS("_TtC11OptimoveSDK8Optimove")
@interface Optimove : NSObject
/// The shared instance of Optimove SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Optimove * _Nonnull shared;)
+ (Optimove * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Report the screen visit event.
/// \param screenTitle The screen title.
///
/// \param screenCategory The screen category.
///
- (void)reportScreenVisitWithScreenTitle:(NSString * _Nonnull)title screenCategory:(NSString * _Nullable)category;
/// Report the screen visit event.
/// \param screenTitle The screen title.
///
/// \param screenCategory The screen category.
///
+ (void)reportScreenVisitWithScreenTitle:(NSString * _Nonnull)title screenCategory:(NSString * _Nullable)category;
@end

@protocol OptimoveEvent;

@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Report the event to Optimove SDK.
/// \param name Name of the event.
///
/// \param parameters The dictionary of attributes.
///
- (void)reportEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/// Report the event to Optimove SDK.
/// \param name Name of the event.
///
/// \param parameters The dictionary of attributes.
///
+ (void)reportEventWithName:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/// Report the event to Optimove SDK.
/// \param event Instance of OptimoveEvent type.
///
- (void)reportEvent:(id <OptimoveEvent> _Nonnull)event;
/// Report the event to Optimove SDK.
/// \param event Instance of OptimoveEvent type.
///
+ (void)reportEvent:(id <OptimoveEvent> _Nonnull)event;
@end

@class NSData;
@class UIApplication;
@class NSUserActivity;
@protocol UIUserActivityRestoring;
@class UIScene;

@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Helper method for requesting the device token with alert, badge and sound permissions.
/// On success will raise the didRegisterForRemoteNotificationsWithDeviceToken UIApplication event
- (void)pushRequestDeviceToken;
/// Helper method for requesting the device token with alert, badge and sound permissions.
/// On success will raise the didRegisterForRemoteNotificationsWithDeviceToken UIApplication event
- (void)pushRequestDeviceToken:(void (^ _Nullable)(UNAuthorizationStatus, NSError * _Nullable))onAuthorizationStatus SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Register a device token with the Optimove Push service.
/// Note you shouldn’t normally need to call this method, registration is handled by the SDK.
/// Parameters:
/// - deviceToken: The push token returned by the device
- (void)pushRegister:(NSData * _Nonnull)deviceToken;
/// Unregister the device token with the Optimove Push service.
/// Notifications will no longer be received until pushRequestDeviceToken is called again
- (void)pushUnregister;
/// Used for Deferred Deep Linking to pass the continuation to the Optimove SDK to be processed.
- (BOOL)application:(UIApplication * _Nonnull)application continue:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nonnull)(NSArray<id <UIUserActivityRestoring>> * _Nullable))restorationHandler SWIFT_WARN_UNUSED_RESULT;
/// Used for Deferred Deep Linking to pass the continuation to the Optimove SDK to be processed in scene-based apps.
- (void)scene:(UIScene * _Nonnull)scene continue:(NSUserActivity * _Nonnull)userActivity SWIFT_AVAILABILITY(ios,introduced=13.0);
@end


@interface Optimove (SWIFT_EXTENSION(OptimoveSDK))
/// Set a user ID and a user email.
/// \param sdkId The user unique identifier.
///
/// \param email The user email.
///
- (void)registerUserWithSdkId:(NSString * _Nonnull)userID email:(NSString * _Nonnull)email;
/// Set a user ID and a user email.
/// \param sdkId The user unique identifier.
///
/// \param email The user email.
///
+ (void)registerUserWithSdkId:(NSString * _Nonnull)userID email:(NSString * _Nonnull)email;
/// Set a user ID to the Optimove SDK.
/// \param userID The user unique identifier.
///
- (void)setUserId:(NSString * _Nonnull)userID;
/// get visitor id of optimove SDK.
/// call this function if you need the internal visitor Id of Optimove
+ (NSString * _Nullable)getVisitorID SWIFT_WARN_UNUSED_RESULT;
/// Set a user ID to the Optimove SDK.
/// \param userID The user unique identifier.
///
+ (void)setUserId:(NSString * _Nonnull)userID;
/// Set a user email to the Optimove SDK.
/// \param email The user email.
///
- (void)setUserEmailWithEmail:(NSString * _Nonnull)email;
/// Set a user email to the Optimove SDK.
/// \param email The user email.
///
+ (void)setUserEmailWithEmail:(NSString * _Nonnull)email;
/// Signout the user from the app
/// Call this function to unset the customerID and revert to an anonymous visitor
+ (void)signOutUser;
@end


SWIFT_CLASS("_TtC11OptimoveSDK21OptimoveConfigBuilder")
@interface OptimoveConfigBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11OptimoveSDK13OptimoveEvent_")
@protocol OptimoveEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Valid a parameter values are <code>String</code>, <code>Int</code>, <code>Float</code>, <code>Double</code> or <code>Boolean</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull parameters;
@end


SWIFT_CLASS("_TtC11OptimoveSDK18OptimoveTenantInfo")
@interface OptimoveTenantInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull tenantToken;
@property (nonatomic, copy) NSString * _Nonnull configName;
- (nonnull instancetype)initWithTenantToken:(NSString * _Nonnull)tenantToken configName:(NSString * _Nonnull)configName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11OptimoveSDK16PushNotification")
@interface PushNotification : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
